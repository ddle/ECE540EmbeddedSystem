                    ;------------------------------------------------------------------------------------------
                    ; KCPSM6 reference design using 'uart_tx6' and 'uart_rx6' macros.
                    ;
                    ; Ken Chapman - Xilinx Ltd
                    ; Modified by Dung Le
					; 
					; 10th Oct 2012 - modified to simple read/echo via uart, move "send" routines to interface
					;                 file. - Le
                    ; 11th May 2011 - Initial version
                    ; 6th October 2011 - Corrections to comments only
                    ; 23rd April 2012 - UART interface routines placed into 'uart_interface_routines.psm'
                    ;                   to facilitate reuse and provide an INCLUDE directive example.
                    ;
                    ;
                    ; INTRODUCTION
                    ;
                    ; This program interacts with the 'uart_tx6' and 'uart_rx6' macros providing some simple
                    ; and fundamental examples of UART based communication. As such, this example is intended
                    ; to display messages on a PC based terminal (e.g. HyperTerminal) and receive inputs typed
                    ; on a keyboard by the user.
                    ;
                    ; The user is prompted to enter a 4-digit hexadecimal value which KCPSM6 converts to
                    ; decimal and displays if it is valid. It is hoped that this will also provide you with
                    ; several routines that you will find useful in your own programs.
                    ;
                    ; Please see 'UART6_User_Guide_30April12.pdf' for more detailed descriptions of the
                    ; hardware circuit. The 'UART_TX' and 'UART_RX' routines that form the software interface
                    ; with the macros are contained in 'uart_interface_routines.psm' together with a set of
                    ; constants which define the allocation of I/O ports and the signals within them. The
                    ; 'uart_interface_routines.psm' also presents an example of using the INCLUDE directive
                    ; introduced with KCPSM6 Assembler v2.00.
                    ;
                    ;
                    ;------------------------------------------------------------------------------------------
                    ; Port definitions
                    ;------------------------------------------------------------------------------------------
                    ;
                    ; The only I/O ports used in this design are those that interface with the UART macros.
                    ; CONSTANT directives defining the port addresses and the allocation of signals within
                    ; those ports are defined in 'uart_interface_routines.psm'.
                    ;
                    ;
                    ;------------------------------------------------------------------------------------------
                    ; Special Register usage
                    ;------------------------------------------------------------------------------------------
                    ;
                    ; No registers are given special names in this program.
                    ;
                    ;------------------------------------------------------------------------------------------
                    ; Initialise the system
                    ;------------------------------------------------------------------------------------------
                    ;
                    ; A delay of 1 second is implemented which is intended to give time for all the hardware
                    ; to settle into a stable condition before starting to doing anything. This can be
                    ; particularly beneficial when dealing with long cables where serial lines can take some
                    ; time to reach the initial idle state following power being applied.
                    ;
        cold_start: CALL delay_1s                   ;
                    ;
                    CALL reset_UART_macros          ;Reset buffers in UART macros
                    ;
                    ;
                    ; Initialised terminal display and display welcome messages
                    ;
                    CALL clear_screen
                    CALL welcome_message
                    ;
                    ;
                    ;------------------------------------------------------------------------------------------
                    ; Main Program
                    ;------------------------------------------------------------------------------------------
                    ;
                    ;
              main: ;LOAD sA, 00                     ; initialise potentially unused bits to zero
                    CALL UART_RX                     ; wait for a character and return in s5
                    JUMP Z, main            		 ; continue to wait if timeout occurs
                    CALL UART_TX					 ; echo back msg
					;CALL send_CR
                    ;CALL send_CR
                    ; LOAD sB, prompt_msg'upper       ;prompt user to enter a HEX value
                    ; LOAD sA, prompt_msg'lower
                    ; CALL send_message
                    ; CALL send_CR
                     ;CALL send_CR
                    ; LOAD s5, ">"
                    ; CALL UART_TX
                    ; CALL send_space                 ;advance cursor to prompt for address
                    
                    ; LOAD sE, 4'd                    ;obtain 4-digit value
                    ; CALL obtain_value               ;16-bit value returned in [sB,sA]
                    ; JUMP C, bad_hex_input           ;Carry set for a bad hex value
                    ; STORE sA, hex_value0            ;store value in scratch pad
                    ; STORE sB, hex_value1
                    
                    ; CALL send_CR
                    ; LOAD sB, result_msg'upper       ;display the HEX and its decimal equivalent
                    ; LOAD sA, result_msg'lower
                    ; CALL send_message
                    ; FETCH sA, hex_value0            ;retrieve 16-bit value into [sB,sA]
                    ; FETCH sB, hex_value1
                    ; CALL send_hex_word              ;send value of [sB,sA] to UART Tx
                    ; CALL send_space
                    ; LOAD s5, "i"
                    ; CALL UART_TX
                    ; LOAD s5, "s"
                    ; CALL UART_TX
                    ; CALL send_space
                    
                    ; FETCH s2, hex_value0            ;retrieve 16-bit value into [s3,s2]
                    ; FETCH s3, hex_value1
                    ; CALL send_integer               ;convert [s3,s2] to decimal and transmit
                    JUMP main
					;

                    ;------------------------------------------------------------------------------------------
                    ; Welcome Message.
                    ;------------------------------------------------------------------------------------------
                    ;
                    ; The welcome message includes a display of the version information available from the
                    ; assembler and the 'hwbuild' from the instantiation of KCPSM6 in the hardware design.
                    ;
   welcome_message: LOAD sB, welcome_msg'upper
                    LOAD sA, welcome_msg'lower
                    CALL send_message
                    HWBUILD s5                      ;hardware version defines ASCII letter
                    CALL UART_TX
                    CALL send_CR
                    RETURN
                    ;
                    ; Welcome message
                    ;
                    STRING banner1$, "  _  ______ ____  ____  __  __  __"
                    STRING banner2$, " | |/ / ___|  _ \/ ___||  \/  |/ /_"
                    STRING banner3$, " | ' / |   | |_) \___ \| |\/| | '_ \"
                    STRING banner4$, " | . \ |___|  __/ ___) | |  | | (_) )"
                    STRING banner5$, " |_|\_\____|_|   |____/|_|  |_|\___/"
                    ;
                    ; Welcome message
                    ;
                    STRING welcome1$, "Example using the 'uart_tx6' and 'uart_rx6': type -> echo to screen"
                    STRING welcome2$, "Assembly Date: "
                    STRING welcome3$, "   Time: "
                    STRING welcome4$, "Assembler Version: "
                    STRING welcome5$, "Hardware Design: Testing 7... -le"
					STRING welcome6$, "type here: "
                    ;
                    ;
       welcome_msg: LOAD&RETURN s5, banner1$
                    LOAD&RETURN s5, character_CR
                    LOAD&RETURN s5, banner2$
                    LOAD&RETURN s5, character_CR
                    LOAD&RETURN s5, banner3$
                    LOAD&RETURN s5, character_CR
                    LOAD&RETURN s5, banner4$
                    LOAD&RETURN s5, character_CR
                    LOAD&RETURN s5, banner5$
                    LOAD&RETURN s5, character_CR
                    LOAD&RETURN s5, character_CR
                    LOAD&RETURN s5, welcome1$
                    LOAD&RETURN s5, character_CR
                    LOAD&RETURN s5, character_CR
                    LOAD&RETURN s5, welcome2$
                    LOAD&RETURN s5, datestamp$
                    LOAD&RETURN s5, welcome3$
                    LOAD&RETURN s5, timestamp$
                    LOAD&RETURN s5, character_CR
                    LOAD&RETURN s5, welcome4$
                    LOAD&RETURN s5, KCPSM6_version$
                    LOAD&RETURN s5, character_CR
                    LOAD&RETURN s5, welcome5$ 
                    LOAD&RETURN s5, character_CR
                    LOAD&RETURN s5, character_CR					
					LOAD&RETURN s5, welcome6$
                    LOAD&RETURN s5, character_NULL
                    ;
                    ;
                    ;------------------------------------------------------------------------------------------
                    ; Include PSM files
                    ;------------------------------------------------------------------------------------------
                    ; NOTE : THIS INCLUDE SECTION MUST BE PLACED AT THE BOTTOM
					;
                    ; The INCLUDE directive enables commonly routines to be kept in their own PSM files and
                    ; easily reused in different programs (i.e. avoiding 'cut and paste'). It also allows
                    ; each PSM to remain a more manageable size.
                    ;
                    ;
                    ; Include routines that implement interface with UART macros.
                    ; -----------------------------------------------------------
                    ;
                    INCLUDE "uart_interface_routines.psm"
					INCLUDE "delay.psm"
                    ;
                    ;
                    ;------------------------------------------------------------------------------------------
                    ; End of Program
                    ;------------------------------------------------------------------------------------------
                    ;
