	;--------------------------------------------------------------------------
	; File: test_program.psm
	; Test uart module functions on Nexys 3 board
	;--------------------------------------------------------------------------
	;
	;
	; Include PSM files that implement interface with UART macros.
	;
	;
	INCLUDE "uart_interface_routines.psm"
	INCLUDE "delay.psm"
	;
	;
	; Useful data constants
	;
	;
	CONSTANT character_NULL, 00     ; NULL
	CONSTANT character_BS, 08       ; Back Space
	CONSTANT character_LF, 0A       ; line feed
	CONSTANT character_CR, 0D       ; carriage return
	CONSTANT character_ESC, 1B      ; Escape
	;
	;
	;------------------------------------------------------------------------------------------
	; Initialise the system
	;------------------------------------------------------------------------------------------
	;
	; A delay of 1 second is implemented which is intended to give time for all the hardware
	; to settle into a stable condition before starting to doing anything. This can be
	; particularly beneficial when dealing with long cables where serial lines can take some
	; time to reach the initial idle state following power being applied.
	;
	;
cold_start: 
	CALL delay_1s                   ;
	CALL reset_UART_macros          ; Reset buffers in UART macros
	;
	; Initialised terminal display and display welcome messages
	;
	;CALL clear_screen
	;CALL welcome_message
	;
	;
main: 
	CALL UART_RX                    ;wait for a character and return in s5
    JUMP Z, main                    ;continue to wait if timeout occurs
    CALL UART_TX                    ;echo character as entered
	JUMP main
	;
	;
	;------------------------------------------------------------------------------------------
	; Send a message to the UART
	;------------------------------------------------------------------------------------------
	;
	; A message is transmitted to the USB-UART.
	; The start address of the message must be provided in [sB,sA].
	; Terminate the transmission with a NULL character (00 hex).
	;
	;
send_message: 
	CALL@ (sB, sA)
	COMPARE s5, 00                  ;terminate on NUL character
	RETURN Z
	CALL UART_TX
	ADD sA, 1'd
	ADDCY sB, 0'd
	JUMP send_message
	;
	;------------------------------------------------------------------------------------------
	; Welcome Message.
	;------------------------------------------------------------------------------------------
	;
	; The welcome message includes a display of the version information available from the
	; assembler and the 'hwbuild' from the instantiation of KCPSM6 in the hardware design.
	;
	;
welcome_message: 
	LOAD sB, welcome_msg'upper
	LOAD sA, welcome_msg'lower
	CALL send_message
	HWBUILD s5                      ;hardware version defines ASCII letter
	CALL UART_TX
	CALL send_CR
	RETURN 
	;
	; Welcome message
	;
	STRING banner1$, "  _  ______ ____  ____  __  __  __"
	STRING banner2$, " | |/ / ___|  _ \/ ___||  \/  |/ /_"
	STRING banner3$, " | ' / |   | |_) \___ \| |\/| | '_ \"
	STRING banner4$, " | . \ |___|  __/ ___) | |  | | (_) )"
	STRING banner5$, " |_|\_\____|_|   |____/|_|  |_|\___/"
	;
	; Welcome message
	;
	STRING welcome1$, "Example using the 'uart_tx6' and 'uart_rx6' macros"
	STRING welcome2$, "Assembly Date: "
	STRING welcome3$, "   Time: "
	STRING welcome4$, "Assembler Version: "
	STRING welcome5$, "Hardware Design: "
	;
	;
welcome_msg: 
	LOAD&RETURN s5, banner1$
	LOAD&RETURN s5, character_CR
	LOAD&RETURN s5, banner2$
	LOAD&RETURN s5, character_CR
	LOAD&RETURN s5, banner3$
	LOAD&RETURN s5, character_CR
	LOAD&RETURN s5, banner4$
	LOAD&RETURN s5, character_CR
	LOAD&RETURN s5, banner5$
	LOAD&RETURN s5, character_CR
	LOAD&RETURN s5, character_CR
	LOAD&RETURN s5, welcome1$
	LOAD&RETURN s5, character_CR
	LOAD&RETURN s5, character_CR
	LOAD&RETURN s5, welcome2$
	LOAD&RETURN s5, datestamp$
	LOAD&RETURN s5, welcome3$
	LOAD&RETURN s5, timestamp$
	LOAD&RETURN s5, character_CR
	LOAD&RETURN s5, welcome4$
	LOAD&RETURN s5, KCPSM6_version$
	LOAD&RETURN s5, character_CR
	LOAD&RETURN s5, welcome5$
	LOAD&RETURN s5, character_NULL
	;
	;
	;------------------------------------------------------------------------------------------
	; Clear terminal and home cursor sequences for HyperTerminal (or similar)
	;------------------------------------------------------------------------------------------
	;
	;
	; ANSI Escape Sequences/codes (VT100)
	;
	;
clear_screen: 
	LOAD s5, character_ESC          ;clear terminal sequence
	CALL UART_TX
	LOAD s5, "["
	CALL UART_TX
	LOAD s5, "2"
	CALL UART_TX
	LOAD s5, "J"
	CALL UART_TX
	CALL delay_1ms                  ;Delay for reliable operation
	RETURN 
	;
	;
	;------------------------------------------------------------------------------------------
	; Send Carriage Return to UART
	;------------------------------------------------------------------------------------------
	;
	; Registers used s0, s1, s2, and s5.
	;
send_CR: 
	LOAD s5, character_CR
	JUMP UART_TX                    ;includes RETURN
	;
	;